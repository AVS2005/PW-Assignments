BST Assignment

Q1. Write an iterative program to search for an element in BST. Also construct a sample BST and
try to search for elements in the same.
The for BST is : 15, 10, 20, 8, 12, 16, 25

Ans:- 
	// A class to store a BST node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to insert a key into a BST
    public static Node insert(Node root, int key)
    {
        // if the root is null, create a new node and return it
        if (root == null) {
            return new Node(key);
        }
 
        // if the given key is less than the root node, recur for the left subtree
        if (key < root.data) {
            root.left = insert(root.left, key);
        }
 
        // if the given key is more than the root node, recur for the right subtree
        else {
            root.right = insert(root.right, key);
        }
 
        return root;
    }
 
    // Iterative function to search in a given BST
    public static void searchIterative(Node root, int key)
    {
        // start with the root node
        Node curr = root;
 
        // pointer to store the parent of the current node
        Node parent = null;
 
        // traverse the tree and search for the key
        while (curr != null && curr.data != key)
        {
            // update the parent to the current node
            parent = curr;
 
            // if the given key is less than the current node, go to the left subtree;
            // otherwise, go to the right subtree
            if (key < curr.data) {
                curr = curr.left;
            }
            else {
                curr = curr.right;
            }
        }
 
        // if the key is not present in the key
        if (curr == null)
        {
            System.out.println("Key not found");
            return;
        }
 
        if (parent == null) {
            System.out.println("The node with key " + key + " is root node");
        }
        else if (key < parent.data)
        {
            System.out.println("The given key is the left node of the node with key "
                            + parent.data);
        }
        else {
            System.out.println("The given key is the right node of the node with key "
                            + parent.data);
        }
    }
 
    public static void main(String[] args)
    {
        int[] keys = { 15, 10, 20, 8, 12, 16, 25 };
 
        Node root = null;
        for (int key: keys) {
            root = insert(root, key);
        }
 
        searchIterative(root, 25);
    }
}

Q2. Given a BST and a positive number k, find the k'th largest node in the BST.
For example, consider the following binary search tree. If k = 2, the k'th largest node is 20.

Ans:-
	import java.util.concurrent.atomic.AtomicInteger;
 
// A class to store a BST node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to insert a key into a BST
    public static Node insert(Node root, int key)
    {
        // if the root is null, create a new node and return it
        if (root == null) {
            return new Node(key);
        }
 
        // if the given key is less than the root node, recur for the left subtree
        if (key < root.data) {
            root.left = insert(root.left, key);
        }
 
        // if the given key is more than the root node, recur for the right subtree
        else {
            root.right = insert(root.right, key);
        }
 
        return root;
    }
 
    // Function to find the k'th largest node in the BST.
    // Here, `i` denotes the total number of nodes processed so far
    public static Node kthLargest(Node root, AtomicInteger i, int k)
    {
        // base case
        if (root == null) {
            return null;
        }
 
        // search in the right subtree
        Node left = kthLargest(root.right, i, k);
 
        // if k'th largest is found in the left subtree, return it
        if (left != null) {
            return left;
        }
 
        // if the current node is k'th largest, return its value
        if (i.incrementAndGet() == k) {
            return root;
        }
 
        // otherwise, search in the left subtree
        return kthLargest(root.left, i, k);
    }
 
    // Function to find the k'th largest node in the BST
    public static Node kthLargest(Node root, int k)
    {
        // maintain index to count the total number of nodes processed so far
        AtomicInteger i = new AtomicInteger(0);
 
        // traverse the tree in an inorder fashion and return k'th node
        return kthLargest(root, i, k);
    }
 
    public static void main(String[] args)
    {
        int[] keys = { 15, 10, 20, 8, 12, 16, 25 };
 
        Node root = null;
        for (int key: keys) {
            root = insert(root, key);
        }
 
        int k = 2;
        Node node = kthLargest(root, k);
 
        if (node != null) {
            System.out.println(node.data);
        }
        else {
            System.out.println("Invalid Input");
        }
    }
}

Q3. Given a binary search tree, find a pair with a given sum present in it.
For example, consider the following BST. If the given sum is 14, the pair is (8, 6).

Ans:-
	import java.util.HashSet;
import java.util.Set;
 
// A class to store a BST node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to insert a key into a BST
    public static Node insert(Node root, int key)
    {
        // if the root is null, create a new node and return it
        if (root == null) {
            return new Node(key);
        }
 
        // if the given key is less than the root node, recur for the left subtree
        if (key < root.data) {
            root.left = insert(root.left, key);
        }
 
        // if the given key is more than the root node, recur for the right subtree
        else {
            root.right = insert(root.right, key);
        }
 
        return root;
    }
 
    // Function to find a pair with a given sum in the BST
    public static boolean findPair(Node root, int target, Set<Integer> set)
    {
        // base case
        if (root == null) {
            return false;
        }
 
        // return true if pair is found in the left subtree; otherwise, continue
        // processing the node
        if (findPair(root.left, target, set)) {
            return true;
        }
 
        // if a pair is formed with the current node, print the pair and return true
        if (set.contains(target - root.data))
        {
            System.out.println("Pair found (" + (target - root.data) + ", "
                                    + root.data + ")");
            return true;
        }
 
        // insert the current node's value into the set
        else {
            set.add(root.data);
        }
 
        // search in the right subtree
        return findPair(root.right, target, set);
    }
 
    public static void main(String[] args)
    {
        int[] keys = { 15, 10, 20, 8, 12, 16, 25 };
 
        Node root = null;
        for (int key: keys) {
            root = insert(root, key);
        }
 
        // find pair with the given sum
        int target = 28;
 
        // create an empty set
        Set<Integer> set = new HashSet<>();
 
        if (!findPair(root, target, set)) {
            System.out.println("Pair does not exist");
        }
    }
}

Q4. Given a BST, find the inorder predecessor of a given key in it. If the key does not lie in the BST,
return the previous greater node (if any) present in the BST.

Ans:-
	// A class to store a BST node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to insert a key into a BST
    public static Node insert(Node root, int key)
    {
        // if the root is null, create a new node and return it
        if (root == null) {
            return new Node(key);
        }
 
        // if the given key is less than the root node, recur for the left subtree
        if (key < root.data) {
            root.left = insert(root.left, key);
        }
 
        // if the given key is more than the root node, recur for the right subtree
        else {
            root.right = insert(root.right, key);
        }
 
        return root;
    }
 
    // Helper function to find the maximum value node in a given BST
    public static Node findMaximum(Node root)
    {
        while (root.right != null) {
            root = root.right;
        }
 
        return root;
    }
 
    // Recursive function to find inorder predecessor for a given key in the BST
    public static Node findPredecessor(Node root, Node prec, int key)
    {
        // base case
        if (root == null) {
            return prec;
        }
 
        // if a node with the desired value is found, the predecessor is the maximum
        // value node in its left subtree (if any)
        if (root.data == key)
        {
            if (root.left != null) {
                return findMaximum(root.left);
            }
        }
 
        // if the given key is less than the root node, recur for the left subtree
        else if (key < root.data) {
            return findPredecessor(root.left, prec, key);
        }
 
        // if the given key is more than the root node, recur for the right subtree
        else {
            // update predecessor to the current node before recursing
            // in the right subtree
            prec = root;
            return findPredecessor(root.right, prec, key);
        }
        return prec;
    }
 
    public static void main(String[] args)
    {
        int[] keys = { 15, 10, 20, 8, 12, 16, 25 };
 
        /* Construct the following tree
                   15
                 /    \
                /      \
               10       20
              /  \     /  \
             /    \   /    \
            8     12 16    25
        */
 
        Node root = null;
        for (int key: keys) {
            root = insert(root, key);
        }
 
        // find inorder predecessor for each key
        for (int key: keys)
        {
            Node prec = findPredecessor(root, null, key);
 
            if (prec != null)
            {
                System.out.println("The predecessor of node " + key + " is "
                                    + prec.data);
            }
            else {
                System.out.println("The predecessor doesn't exist for node "
                                    + key);
            }
        }
    }
}

Q5. Given a BST and two nodes x and y in it, find the lowest common ancestor (LCA) of x and y.
The solution should return null if either x or y is not the actual node in the tree.

Ans:- 
	// A class to store a BST node
class Node
{
    int data;
    Node left = null, right = null;
 
    Node(int data) {
        this.data = data;
    }
}
 
class Main
{
    // Recursive function to insert a key into a BST
    public static Node insert(Node root, int key)
    {
        // if the root is null, create a new node and return it
        if (root == null) {
            return new Node(key);
        }
 
        // if the given key is less than the root node, recur for the left subtree
        if (key < root.data) {
            root.left = insert(root.left, key);
        }
 
        // if the given key is more than the root node, recur for the right subtree
        else {
            root.right = insert(root.right, key);
        }
 
        return root;
    }
 
    // Iterative function to search a given node in a BST
    public static boolean search(Node root, Node key)
    {
        // traverse the tree and search for the key
        while (root != null)
        {
            // if the given key is less than the current node, go to the left
            // subtree; otherwise, go to the right subtree
 
            if (key.data < root.data) {
                root = root.left;
            }
            else if (key.data > root.data) {
                root = root.right;
            }
            // if the key is found, return true
            else if (key == root) {
                return true;
            }
            else {
                return false;
            }
        }
 
        // we reach here if the key is not present in the BST
        return false;
    }
 
    // Recursive function to find the lowest common ancestor of given nodes
    // `x` and `y`, where both `x` and `y` are present in the BST
    public static Node LCARecursive(Node root, Node x, Node y)
    {
        // base case: empty tree
        if (root == null) {
            return null;
        }
 
        // if both `x` and `y` is smaller than the root, LCA exists in the
        // left subtree
        if (root.data > Integer.max(x.data, y.data)) {
            return LCARecursive(root.left, x, y);
        }
 
        // if both `x` and `y` are greater than the root, LCA exists in the
        // right subtree
        else if (root.data < Integer.min(x.data, y.data)) {
            return LCARecursive(root.right, x, y);
        }
 
        // if one key is greater (or equal) than the root and one key is
        // smaller (or equal) than the root, then the current node is LCA
        return root;
    }
 
    // Print lowest common ancestor of two nodes in the BST
    public static void LCA(Node root, Node x, Node y)
    {
        // return if the tree is empty or `x` or `y` is not present
        // in the tree
        if (root == null || !search(root, x) || !search(root, y)) {
            return;
        }
 
        // `lca` stores the lowest common ancestor of `x` and `y`
        Node lca = LCARecursive(root, x, y);
 
        // if the lowest common ancestor exists, print it
        if (lca != null) {
            System.out.println("LCA is " + lca.data);
        }
        else {
            System.out.println("LCA does not exist");
        }
    }
 
    public static void main(String[] args)
    {
        int[] keys = { 15, 10, 20, 8, 12, 16, 25 };
 
        /* Construct the following tree
                  15
                /   \
               /     \
              10     20
             / \     / \
            /   \   /   \
           8    12 16   25
        */
 
        Node root = null;
        for (int key: keys) {
            root = insert(root, key);
        }
 
        LCA(root, root.left.left, root.left.right);
    }
}
